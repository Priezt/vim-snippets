snippet strftime "strftime"
import datetime
datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
endsnippet

snippet random "random"
import random
random.randint(10000000, 99999999)
random.random() # float: 0~1
endsnippet

snippet decorator "decorator"
def $0(func):
    def wrapped_func(*args, **kwargs):
        return func(*args, **kwargs)
    return wrapped_func
endsnippet

snippet wrap "textwrap"
import textwrap
wrapped_text = textwrap.fill(one_line_text, max_line_length)
endsnippet

snippet requests "requests"
import requests
response = requests.get("https://127.0.0.1", verify=False)
response = requests.post("https://127.0.0.1", {"a":1, "b":2}, verify=False) # post form
response = requests.post("https://127.0.0.1", json={"a":1, "b":2}, verify=False) # post json
print(response.text)
endsnippet

snippet time "time"
import time
ts = time.time() # float
endsnippet

snippet read_text "read_text"
from pathlib import Path
text = Path(filename).read_text()
endsnippet

snippet logger "logger"
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("")
extra_logger = logging.getLogger('extra')
extra_logger.setLevel(logging.INFO)
extra_fhandler = logging.FileHandler('/var/log/extra.log')
extra_fhandler.setLevel(logging.INFO)
extra_formatter = logging.Formatter("[%(asctime)s][%(levelname)s] %(message)s", "%Y-%m-%d %H:%M:%S")
extra_fhandler.setFormatter(extra_formatter)
extra_logger.addHandler(extra_fhandler)
extra_logger.info("")
endsnippet

snippet copy "copy"
import shutil
shutil.copyfile(src, dst)
endsnippet
